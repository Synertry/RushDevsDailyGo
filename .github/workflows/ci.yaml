# Runner intensive tests and analysis
name: CI

on:
  push:
    branches: [ staging ]

env:
  GOPROXY: https://proxy.golang.org
  GO111MODULE: on

# Cancel any in-progress CI runs for a PR if it is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  precheck: # Skip CI if only a README.md is changed, but mark as successful so PR succeeds to protected main branch. Huge bloat logic, because GitHub does not support exceptions, in that case.
    name: Precheck
    runs-on: ubuntu-latest
    outputs:
      doc_only: ${{ steps.diff_check.outputs.output }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 2 # fetch last two commits to compare

      - name: Check diff
        shell: pwsh
        id: diff_check
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Get count of changed doc files
          $docs_change_count = ($diff | Where-Object { $_ -match '(^LICENSE)|(.md$)' }).Count

          # Evaluate if only docs were changed
          Add-Content -Path $Env:GITHUB_OUTPUT -Value ('output={0}' -f ($docs_change_count -eq $diff.Count)).ToLower()

  tests:
    name: Test and Lint
    runs-on: ubuntu-latest
    needs: precheck
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: [ '1.18.x', '1.19.x' ]
      fail-fast: true # Cancel all jobs if one fails

    steps:
      - name: Collect Workflow Telemetry w/ Foresight
        uses: runforesight/foresight-workflow-kit-action@v1
        if: always() && needs.precheck.outputs.doc_only != 'true'
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}

      - name: Checkout code
        if: needs.precheck.outputs.doc_only != 'true'
        uses: actions/checkout@v3.1.0
        with:
          ref: staging

      - name: Setup Go ${{ matrix.go-version }}
        if: needs.precheck.outputs.doc_only != 'true'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
          cache-dependency-path: |
            **/go.sum
            **/go.mod

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.precheck.outputs.doc_only != 'true'
        run: go get ./Daily/...

      - name: Verify dependencies
        if: needs.precheck.outputs.doc_only != 'true'
        run: go mod verify

      # Run tests for each daily, only test in sub dirs
      - name: Test with the Go CLI
        if: needs.precheck.outputs.doc_only != 'true'
        run: go test -v -race -json ./Daily/... > ./test-report.json || true

      - name: Analyze Test and/or Coverage Results
        if: always() && needs.precheck.outputs.doc_only != 'true'
        uses: runforesight/foresight-test-kit-action@v1
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}
          test_framework: golang
          test_format: json
          test_path: ./test-report.json

      - name: Static code analysis
        if: needs.precheck.outputs.doc_only != 'true'
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true


  review-code:
    name: Review code
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      # CodeQL requires this for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    strategy:
      matrix:
        go-version: [ '1.19.x' ]
    steps:
      - name: Collect Workflow Telemetry w/ Foresight
        uses: runforesight/foresight-workflow-kit-action@v1
        if: always() && needs.precheck.outputs.doc_only != 'true'
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}

      - name: Checkout code
        if: needs.precheck.outputs.doc_only != 'true'
        uses: actions/checkout@v3.1.0
        with:
          ref: staging

      - name: Setup Go ${{ matrix.go-version }}
        if: needs.precheck.outputs.doc_only != 'true'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
          cache-dependency-path: |
            **/go.sum
            **/go.mod

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        if: needs.precheck.outputs.doc_only != 'true'
        uses: github/codeql-action/init@v2
        with:
          languages: go

      - name: Perform CodeQL Analysis
        if: needs.precheck.outputs.doc_only != 'true'
        uses: github/codeql-action/analyze@v2

      - name: Dependency Review
        if: needs.precheck.outputs.doc_only != 'true'
        uses: actions/dependency-review-action@v2
        with:
          base-ref: refs/heads/main
          head-ref: refs/heads/staging
          fail-on-severity: high
          deny-licenses: LGPL-2.0, BSD-2-Clause, Apache-1.1, Apache-2.0
          # allow-licenses: MIT, BSL-1.0, BSD-3-CLAUSE, GPL-3.0

      # - name: Generate Code Coverage
      #   if: needs.precheck.outputs.doc_only != 'true'
      #   run: go test -v -race -vet off -covermode atomic -coverprofile coverage.out ./Daily/...

      - name: Generate Code Coverage & report to Codeclimate
        if: needs.precheck.outputs.doc_only != 'true'
        uses: paambaati/codeclimate-action@v3.2.0
        env:
          # Set CC_TEST_REPORTER_ID as secret of your repo
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          # The report file must be there, otherwise Code Climate won't find it
          coverageCommand: go test -v -race -vet off -covermode atomic -coverprofile coverage.out ./Daily/...
          coverageLocations: ${{ github.workspace }}/coverage.out:gocov
          prefix: github.com/Synertry/RushDevsDailyGo

      - name: Report test coverage to Foresight
        uses: runforesight/foresight-test-kit-action@v1
        if: always() && needs.precheck.outputs.doc_only != 'true'
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}
          coverage_format: golang
          coverage_path: ./coverage.out

      - name: Report test coverage to Codecov
        if: needs.precheck.outputs.doc_only != 'true'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: RushDevsDailyGo
          fail_ci_if_error: true

      - name: Report test coverage to DeepSource
        if: needs.precheck.outputs.doc_only != 'true'
        uses: deepsourcelabs/test-coverage-action@master
        with:
          key: go
          coverage-file: coverage.out
          dsn: ${{ secrets.DEEPSOURCE_DSN }}


  pull-request:
    name: Create PR to main
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    needs: review-code
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          ref: staging

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT }}
          branch: main
          base: staging
          assignees: Synertry
          reviewers: Synertry
          title: 'Pull request ready for merge into production at ${{ github.event.repository.updated_at }}'
          body: |
            This is an automatically created pull request to signal the completion of the staging branch steps.
            It needs to be reviewed and approved before it can be merged into production.
          labels: |
            auto-pr