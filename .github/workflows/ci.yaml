# Runner intensive tests and analysis
name: CI

on:
  push:
    branches: [ staging ]
    paths-ignore:
      - "README.md"

env:
  GOPROXY: https://proxy.golang.org
  GO111MODULE: on

# Cancel any in-progress CI runs for a PR if it is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  tests:
    name: Test and Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: [ '1.18.x', '1.19.x' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          ref: staging

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
          cache-dependency-path: |
            **/go.sum
            **/go.mod

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: go get .

      - name: Verify dependencies
        run: go mod verify

      # Run tests for each daily, only test in sub dirs
      - name: Test with the Go CLI
        run: go test -race ./Daily/...

      - name: Static code analysis
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true


  review-code:
    name: Review code
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      # CodeQL requires this for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    strategy:
      matrix:
        go-version: [ '1.19.x' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          ref: staging

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
          cache-dependency-path: |
            **/go.sum
            **/go.mod

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Dependency Review
        uses: actions/dependency-review-action@v2
        with:
          base-ref: refs/heads/main
          head-ref: refs/heads/staging
          fail-on-severity: high
          deny-licenses: LGPL-2.0, BSD-2-Clause, Apache-1.1, Apache-2.0
          # allow-licenses: MIT, BSL-1.0, BSD-3-CLAUSE, GPL-3.0

      - name: Generate Code Coverage
        run: go test -v -race -vet off -covermode atomic -coverprofile coverage.out ./Daily/...

      - name: Upload Code Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: RushDevsDailyGo
          fail_ci_if_error: true

      - name: Report results to DeepSource
        run: |
          # Install deepsource CLI
          curl https://deepsource.io/cli | sh

          # From the root directory, run the report coverage command
          ./bin/deepsource report --analyzer test-coverage --key go --value-file ./coverage.out
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}


  pull-request:
    name: Create pull request to main
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    needs: review-code
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          ref: staging

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: main
          base: staging
          assignees: Synertry
          reviewers: Synertry
          title: 'Pull request ready for merge into production at ${{ github.event.repository.updated_at }}'
          body: |
            This is an automatically created pull request to signal the completion of the staging branch steps.
            It needs to be reviewed and approved before it can be merged into production.
          labels: |
            auto-pr